from typing import List, Tuple

from PIL.Image import Image

from flashcard_model.Model import Model

import requests
import os
from dotenv import load_dotenv
import openai

class ChatGPTModel(Model):
    def model_forward(self, extracted_pages: List[Tuple[int, str, str, Image]]) -> List[Tuple[int, List[str]]]:
        # Implement chatgpt model here
        load_dotenv()
        openai.api_key = os.getenv("OPENAI-API-KEY")
        results = List[Tuple[int, List[str]]]
        for i in extracted_pages:
            card_back = extracted_pages[i][1]  # storing the input as back of the card
            results[i][0] = List[i][0]  # copying page number to new flashcard
            results[i][1] = self.chatGPT("Generate a question in a flashcard style for the following content: " + card_back)  # storing question that is generated by ChatGPT
        return results

    def chatGPT(prompt):
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )
        return completion.choices[0].message.content
